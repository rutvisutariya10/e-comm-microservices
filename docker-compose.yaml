services:
  postgres:
    container_name: ms_pgsql
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - 5433:5432
    networks:
      - microservices-net
    restart: unless-stopped

  pgadmin:
    container_name: ms_pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-pgadmin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - 5050:80
    networks:
      - microservices-net
    restart: unless-stopped

  mongodb:
    container_name: ms_mongodb
    image: mongo
    ports:
      - 27017:27017
    volumes:
      - mongo:/data
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
    networks:
      - microservices-net

  mongo-express:
    container_name: ms_mongo_express
    image: mongo-express
    restart: unless-stopped
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_URL: "mongodb://mongo:mongo@ms_mongodb:27017/"
      ME_CONFIG_BASICAUTH_ENABLED: "false"
    networks:
      - microservices-net

  mail-dev:
    container_name: ms_maildev
    image: maildev/maildev
    ports:
      - 1080:1080
      - 1025:1025
    networks:
        - microservices-net

  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    environment:
        ZOOKEEPER_SERVER_ID: 1
        ZOOKEEPER_CLIENT_PORT: 2181
        ZOOKEEPER_TICK_TIME: 2000
    ports:
        - 22181:2181
    networks:
        - microservices-net

  kafka:
    image: confluentinc/cp-kafka
    container_name: ms_kafka
    ports:
        - 9092:9092
    depends_on:
        - zookeeper
    environment:
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://ms_kafka:9092
    networks:
        - microservices-net

  zipkin:
    container_name: zipkin
    image: openzipkin/zipkin
    ports:
        - 9411:9411
    networks:
        - microservices-net

#  keycloak:
#    container_name: keycloak-ms
#    image: quay.io/keycloak/keycloak:24.0.2
#    ports:
#      - 9098:8080
#    environment:
#      KEYCLOAK_ADMIN: admin
#      KEYCLOAK_ADMIN_PASSWORD: admin
#      DB_VENDOR: postgres
#      DB_ADDR: postgres
#      DB_DATABASE: keycloak
#      DB_USER: postgres
#      DB_PASSWORD: postgres
#    depends_on:
#      - postgres
#    networks:
#      - microservices-net
#    command:
#      - "start-dev"

  config-server:
    container_name: config-server
    build:
      context: "./services/config-server"
    ports:
      - 8889:8889
    networks:
      - microservices-net

  customer:
    container_name: customer-service
    build:
      context: "./services/customer"
    ports:
      - 8090:8090
    networks:
      - microservices-net

  discovery:
    container_name: discovery-service
    build:
      context: "./services/discovery"
    ports:
      - 8761:8761
    networks:
      - microservices-net

  gateway:
    container_name: gateway-service
    build:
      context: "./services/gateway"
    ports:
      - 8222:8222
    networks:
      - microservices-net

  notification:
    container_name: notification-service
    build:
      context: "./services/notification"
    ports:
      - 8040:8040
    networks:
      - microservices-net

  order:
    container_name: order-service
    build:
      context: "./services/order"
    ports:
      - 8070:8070
    networks:
      - microservices-net

  payment:
    container_name: payment-service
    build:
      context: "./services/payment"
    ports:
      - 8060:8060
    networks:
      - microservices-net

  product:
    container_name: product-service
    build:
      context: "./services/product"
    ports:
      - 8050:8050
    networks:
      - microservices-net

networks:
  microservices-net:
    driver: bridge
    name: microservices-net

volumes:
  postgres:
  pgadmin:
  mongo: